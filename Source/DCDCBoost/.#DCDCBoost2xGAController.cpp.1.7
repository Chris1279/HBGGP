/*
 *  DCDCBoostBG.cpp
 *  Copyright 2009 Jean-Francois Dupuis.
 *
 *  This file is part of HBGGP.
 *  
 *  HBGGP is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  HBGGP is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with HBGGP.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  This file was created by Jean-Francois Dupuis on 14/12/09.
 */

#include "DCDCBoost2xGAController.h"
#include <cfloat>
#include <assert.h>

void DCDCBoost2xGAController::writeLog() {
	assert(size() == 3);
	(*mLogger)[(*this)[0]->getName()+std::string(".state")].push_back((*this)[0]->getState());
	(*mLogger)[(*this)[1]->getName()+std::string(".state")].push_back((*this)[1]->getState());
	(*mLogger)[(*this)[2]->getName()+std::string(".state")].push_back((*this)[2]->getState());
	(*mLogger)["TargetVa"].push_back(mTargets[0]);
	(*mLogger)["TargetVb"].push_back(mTargets[1]);
	(*mLogger)["TargetI"].push_back(mTargets[2]);
	(*mLogger)["ControlSymbols"].push_back(mLastInputSymbols[0]);
}

void DCDCBoost2xGAController::initialize(HybridBondGraph *inBondGraph, unsigned int inInitialSwState, const vector<double> &inStateValues) {
	mBondGraph = inBondGraph;
	mInitialSwState = inInitialSwState;
	
	mInitialState = inStateValues;
	mCurrentState = inInitialSwState;

	setCurrentState(mCurrentState);
	vector<bool> lSwState(3,0);
	lSwState[0] = (*this)[0]->getState();
	lSwState[1] = (*this)[1]->getState();
	lSwState[2] = (*this)[2]->getState();
	
	inBondGraph->setInitialState(lSwState,inStateValues);

	
}

void DCDCBoost2xGAController::reset() { 
	initialize(mBondGraph, mInitialSwState,mInitialState);
}

void DCDCBoost2xGAController::updateSwitchState(double inTime, const vector<double>& inInputs) {
	
	assert(size() == 3);
	assert(mTransitionTable.size() == NBSTATE);

	
	generateInputSymbols(inInputs);
	for(unsigned int i = 0; i < mInputSymbols.size(); ++i) {
		mCurrentState = mTransitionTable[mCurrentState][mInputSymbols[i]];
	}
	
	setCurrentState(mCurrentState);

}

void DCDCBoost2xGAController::setCurrentState(unsigned int inState) {
	switch(inState){
		case 0:
			(*this)[0]->setState(false);
			(*this)[1]->setState(true);
			(*this)[2]->setState(true);
			break;
		case 1:
			(*this)[0]->setState(true);
			(*this)[1]->setState(false);
			(*this)[2]->setState(true);
			break;
		case 2:
			(*this)[0]->setState(true);
			(*this)[1]->setState(true);
			(*this)[2]->setState(false);
			break;
//		case 3:
//			(*this)[0]->setState(true);
//			(*this)[1]->setState(false);
//			(*this)[2]->setState(false);
//			break;
		default:
			throw runtime_error("DCDCBoost2xGAController::setCurrentState invalid state");
	}
	
	
}

void DCDCBoost2xGAController::generateInputSymbols(vector<double> inInputs) {
	
	//Input symbols are a combination of two tanks
	double lVThreshold = 0.01;
	//double lIThreshold = 0.1;
	mInputSymbols.resize(0);
	
	vector<int> lConditionSize(3,3);
	vector<int> lConditionStatus(lConditionSize.size(),0);
	
	if( inInputs[0] < (mTargets[0] - lVThreshold) ) {
		lConditionStatus[0] = 0;
	} else if( inInputs[0] > (mTargets[0] + lVThreshold) ) {
		lConditionStatus[0] = 1;
	} else {
		lConditionStatus[0] = 2;
	}
	
	if( inInputs[1] < (mTargets[1] - lVThreshold) ) {
		lConditionStatus[1] = 0;
	} else if( inInputs[1] > (mTargets[1] + lVThreshold) ) {
		lConditionStatus[1] = 1;
	} else {
		lConditionStatus[1] = 2;
	}

	if( fabs(inInputs[2]) >= mTargets[2] ) {
		lConditionStatus[2] = 0;
	} else if (inInputs[2] < 0) {
		lConditionStatus[2] = 1;
	} else {
		lConditionStatus[2] = 2;
	}
	
//	if( fabs(inInputs[2]) < (mTargets[2] - lIThreshold) ) {
//		lConditionStatus[2] = 0;
//	} else if( fabs(inInputs[2]) > (mTargets[2] + lIThreshold) ) {
//		lConditionStatus[2] = 1;
//	} else {
//		lConditionStatus[2] = 2;
//	}
	
	//Convert to symbol number
	int lMultiplier = lConditionSize[0];
	int lSymbol = lConditionStatus[0];
	for(unsigned int i = 1; i < lConditionStatus.size(); ++i) {
		lSymbol += lConditionStatus[i]*lMultiplier;
		lMultiplier *= lConditionSize[i-1];
	}
	
	if( (find(mLastInputSymbols.begin(),mLastInputSymbols.end(), lSymbol) == mLastInputSymbols.end()) || mStart ) {
		mInputSymbols.push_back(lSymbol);
		mLastInputSymbols = mInputSymbols;
	}
	
	mStart = false;
}

double DCDCBoost2xGAController::computeError() {
	std::string lTargetVa = "TargetVa";
	std::string lTargetVb = "TargetVb";
	std::string lTargetI = "TargetI";
	
	std::string lOutputVa = mOutBonda->getName()+std::string(".e");
	std::string lOutputVb = mOutBondb->getName()+std::string(".e");
	std::string lOutputI = mIBond->getName()+std::string(".f");
	unsigned int lDataSize = (*mLogger)[lTargetVa].size();
	
	assert((*mLogger)[lTargetVa].size() == (*mLogger)[lOutputVa].size() );
	assert((*mLogger)[lTargetVb].size() == (*mLogger)[lOutputVb].size() );
	assert((*mLogger)[lTargetVa].size() == (*mLogger)["time"].size() );
	assert(lDataSize != 0);
	
	std::vector<double> lErrorVa(lDataSize);
	std::vector<double> lErrorVb(lDataSize);
	std::vector<double> lErrorI(lDataSize);
	for(unsigned int i = 0; i < lDataSize; ++i) {
		double lTFactor = (*mLogger)["time"][i]/(*mLogger)["time"].back() + 1;
		
		lErrorVa[i] = fabs((*mLogger)[lOutputVa][i] - (*mLogger)[lTargetVa][i]);
		lErrorVa[i] = lErrorVa[i]*lErrorVa[i]*lTFactor;
		lErrorVb[i] = fabs((*mLogger)[lOutputVb][i] - (*mLogger)[lTargetVb][i]);
		lErrorVb[i] = lErrorVb[i]*lErrorVb[i]*lTFactor;
		
		if((*mLogger)[lOutputI][i] >= 0) {
			lErrorI[i] = (*mLogger)[lOutputI][i] - (*mLogger)[lTargetI][i];
		} else {
			lErrorI[i] = -(*mLogger)[lOutputI][i];
		}
		
		if(lErrorI[i] <= 0)
			lErrorI[i] = 0; //if under limit, fine no penalty
		else
			lErrorI[i] *= lErrorI[i]; //if over, greatly penalise.
	}
	
	std::vector<double> lErrors(3,0);
	for(unsigned int i = 0; i < lDataSize-1; ++i) {
		double dt = (*mLogger)["time"][i+1] - (*mLogger)["time"][i];
		lErrors[0] += (lErrorVa[i]+lErrorVa[i+1])/2*dt;
		lErrors[1] += (lErrorVb[i]+lErrorVb[i+1])/2*dt;
		lErrors[2] += (lErrorI[i]+lErrorI[i+1])/2*dt;
	}
	
	//Take the mean errors of the two targets
	//double lF = (lErrors[0]+lErrors[1])/2;
	
	//Take the worst of the three targets
	double lF = max(lErrors[0],lErrors[1]); 
	lF =  max(lF,lErrors[2]);

	if(lF != 0)
		lF = 1/lF;
	else
		lF = DBL_MAX;
	
	return lF;
}

void DCDCBoost2xGAController::createBondGraph(HybridBondGraph &ioBondGraph) {
	
	//Create the sources
	Source *lSe = new Source(Source::eEffort);
	lSe->setValue(1.5);
	ioBondGraph.addComponent(lSe);
	
	//Create a switch
	Switch *lSw1 = new Switch;
	push_back(lSw1);
	Switch *lSw2 = new Switch;
	push_back(lSw2);
	Switch *lSw3 = new Switch;
	push_back(lSw3);
	
	
	//Create the jonctions
	Junction *lJ1_1 = new Junction(Junction::eOne);
	ioBondGraph.addComponent(lJ1_1);
	
	Junction *lJ0_1 = new Junction(Junction::eZero);
	ioBondGraph.addComponent(lJ0_1);
	
	Junction *lJ1_2 = new Junction(Junction::eOne);
	ioBondGraph.addComponent(lJ1_2);
	
	Junction *lJ0_2 = new Junction(Junction::eZero);
	ioBondGraph.addComponent(lJ0_2);
	
	Junction *lJ0_3 = new Junction(Junction::eZero);
	ioBondGraph.addComponent(lJ0_3);
	
	Junction *lJ1_3 = new Junction(Junction::eOne);
	ioBondGraph.addComponent(lJ1_3);
	
	//Create component
	Passive *lI = new Passive(Passive::eInductor);
	lI->setValue(75e-6);
	ioBondGraph.addComponent(lI);
	
	Passive *lCa = new Passive(Passive::eCapacitor);
	lCa->setValue(800e-6);
	ioBondGraph.addComponent(lCa);
	
	Passive *lRa = new Passive(Passive::eResistor);
	lRa->setValue(6.25);
	ioBondGraph.addComponent(lRa);
	
	Passive *lCb = new Passive(Passive::eCapacitor);
	lCb->setValue(146.6e-6);
	ioBondGraph.addComponent(lCb);
	
	Passive *lRb = new Passive(Passive::eResistor);
	lRb->setValue(34.1);
	ioBondGraph.addComponent(lRb);
	
	//Create the bonds
	ioBondGraph.connect(lSe,lJ1_1);
	mIBond = ioBondGraph.connect(lJ1_1,lI); 
	
	ioBondGraph.connect(lJ1_1,lJ0_1);
	ioBondGraph.connect(lJ0_1,lSw1);
	ioBondGraph.connect(lJ0_1,lJ1_2);
	ioBondGraph.connect(lJ1_2,lSw2);
	ioBondGraph.connect(lJ1_2,lJ0_2);
	ioBondGraph.connect(lJ0_2,lCa);
	mOutBonda = ioBondGraph.connect(lJ0_2,lRa);
	
	ioBondGraph.connect(lJ0_1,lJ1_3);
	ioBondGraph.connect(lJ1_3,lSw3);
	ioBondGraph.connect(lJ1_3,lJ0_3);
	ioBondGraph.connect(lJ0_3,lCb);
	mOutBondb = ioBondGraph.connect(lJ0_3,lRb);
	
	this->addTrigger(mOutBonda,eEffort);
	this->addTrigger(mOutBondb,eEffort);
	this->addTrigger(mIBond,eFlow);
	
	ioBondGraph.addSwitchController(this);
	
	ioBondGraph.postConnectionInitialization();
	
	
	ioBondGraph.addOutputBonds(mIBond, eFlow);
	//	ioBondGraph.addOutputBonds(lBond1, eEffort);
	//	ioBondGraph.addOutputBonds(lBond1, eFlow);
	//	ioBondGraph.addOutputBonds(lBond2, eEffort);
	//	ioBondGraph.addOutputBonds(lBond2, eFlow);
	ioBondGraph.addOutputBonds(mOutBonda, eEffort);
	ioBondGraph.addOutputBonds(mOutBondb, eEffort);
	//	ioBondGraph.addOutputBonds(lBond3, eFlow);
	
	
	//	ioBondGraph.connect(lSe,lJ1_1);
	//	Bond* lBond0 = ioBondGraph.connect(lJ1_1,lI);
	//	ioBondGraph.connect(lJ1_1,lJ0_1);
	//	ioBondGraph.connect(lJ0_1,lC);
	//	Bond* lBond3 = ioBondGraph.connect(lJ0_1,lR);
	//	ioBondGraph.addOutputBonds(lBond3, eEffort);
	//	ioBondGraph.addOutputBonds(lBond0, eFlow);

}


