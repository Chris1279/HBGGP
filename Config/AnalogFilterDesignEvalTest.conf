<?xml version="1.0" encoding="ISO-8859-1"?>
<Beagle version="3.0.3">
	<!--Created by a configuration dump-->
	<!--Evolver: configuration of the algorithm-->
	<Evolver>
		<BootStrapSet>
			<MatlabInitializationOp/>
			<IfThenElseOp parameter="ms.restart.file" value="">
				<PositiveOpSet>
					<InitFromIndividualOp repropb="ec.repro.prob"/>
					<StructuralInitializationOp/>
					</PositiveOpSet>
				<NegativeOpSet>
					<SubMilestoneReadOp/>
					</NegativeOpSet>
				</IfThenElseOp>
			<TermMaxGenOp/>
			<MilestoneWriteOp/>
			</BootStrapSet>
		<MainLoopSet>
				<AnalogFilterEvalOp/>
				<StatsCalcFitnessSimpleOp/>
				<MilestoneWriteOp/>
				<TermMaxGenOp/>
			</MainLoopSet>
		</Evolver>
	<!--System: setting of the evolution-->
	<System>
		<Register>
      <!--ec.elite.keepsize [UInt]: Number of individuals keep as is with strong n-elitism.-->
      <Entry key="ec.elite.keepsize">1</Entry>
      <!--ec.ga2gpsel.tournsize [UInt]: Number of participants for tournament selection for the conversion from GA to GP.-->
      <Entry key="ec.ga2gpsel.tournsize">2</Entry>
      <!--ec.gppop.size [UInt]: Size of the population during GP evolution. -->
      <Entry key="ec.gppop.size">1</Entry>
      <!--ec.hof.demesize [UInt]: Number of individuals kept in each deme's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.demesize">0</Entry>
      <!--ec.hof.vivasize [UInt]: Number of individuals kept in vivarium's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.vivasize">1</Entry>
      <!--ec.init.seedsfile [String]: Name of file to use for seeding the evolution with crafted individual. An empty string means no seeding.-->
      <Entry key="ec.init.seedsfile"/>
      <!--ec.pop.size [UIntArray]: Number of demes and size of each deme of the population. The format of an UIntArray is S1,S2,...,Sn, where Si is the ith value. The size of the UIntArray is the number of demes present in the vivarium, while each value of the vector is the size of the corresponding deme.-->
      <Entry key="ec.pop.size">1</Entry>
      <!--ec.rand.seed [ULong]: Randomizer seed. A zero value means that the seed will be initialized using the /dev/urandom device.-->
      <Entry key="ec.rand.seed">0</Entry>
      <!--ec.repro.prob [Float]: Probability that an individual is reproducted as is, without modification. This parameter is useful only in selection and initialization operators that are composing a breeder tree.-->
      <Entry key="ec.repro.prob">1</Entry>
      <!--ec.sel.tournsize [UInt]: Number of participants for tournament selection.-->
      <Entry key="ec.sel.tournsize">2</Entry>
      <!--ec.species.maxsize [UInt]: Maximum number of species for the subevolution. -->
      <Entry key="ec.species.maxsize">1000</Entry>
      <!--ec.subpop.size [UIntArray]: Number of individual in parameter sub population evolution. -->
      <Entry key="ec.subpop.size">1</Entry>
      <!--ec.term.maxgen [UInt]: Maximum number of generations for the evolution.-->
      <Entry key="ec.term.maxgen">1</Entry>
      <!--ga.cmaes.mulambdaratio [Float]: (Lambda / Mu) ratio, which mean how much bigger is the child population from the parent population during a (Mu+Lambda), (Mu,Lambda) or NSGA2 replacement process.-->
      <Entry key="ga.cmaes.mulambdaratio">2</Entry>
      <!--ga.cmaes.mutpb [Float]: Mutation probability for a single individual.-->
      <Entry key="ga.cmaes.mutpb">1</Entry>
      <!--ga.cmaes.sigma [Double]: Initial CMA-ES sigma value moduling the mutation step size.-->
      <Entry key="ga.cmaes.sigma">0.5</Entry>
      <!--ga.cmaes.tolcond [Double]: Tolerance on condition number of matrix C, used in the CMA-ES termination criterion.-->
      <Entry key="ga.cmaes.tolcond">1e6</Entry>
      <!--ga.cmaes.tolval [Double]: Tolerance on variations of the values, used in the CMA-ES termination criterion.-->
      <Entry key="ga.cmaes.tolval">1e-3</Entry>
      <!--ga.float.inc [DoubleArray]: Increments of valid values assigned to vector's floats. Value can be a scalar, which limit the value for all float vector parameters, or a vector which limit the value for the parameters individually. If the value is not evenly divisible by the increment, the value will be set to the closest valid value.-->
      <Entry key="ga.float.inc">0</Entry>
      <!--ga.float.maxvalue [DoubleArray]: Maximum values assigned to vector's floats. Value can be a scalar, which limit the value for all float vector parameters, or a vector which limit the value for the parameters individually. If the maximum value is smaller than the float vector size, the limit used for the last values of the float vector is equal to the last value of the maximum value vector.-->
      <Entry key="ga.float.maxvalue">100</Entry>
      <!--ga.float.minvalue [DoubleArray]: Minimum  values assigned to vector's floats. Value can be a scalar, which limit the value for all float vector parameters, or a vector which limit the value for the parameters individually. If the minimum value is smaller than the float vector size, the limit used for the last values of the float vector is equal to the last value of the minimum value vector.-->
      <Entry key="ga.float.minvalue">1</Entry>
      <!--ga.init.maxvalue [DoubleArray]: Maximum initialization values assigned to vector's floats. Value can be a scalar, which limit the initialization value for all float vector parameters, or a vector which limit the value for the parameters individually. If the maximum initialization value is smaller than the float vector size, the limit used for the last values of the float vector is equal to the last value of the maximum initialization value vector.-->
      <Entry key="ga.init.maxvalue">100</Entry>
      <!--ga.init.minvalue [DoubleArray]: Minimum initialization values assigned to vector's floats. Value can be a scalar, which limit the initialization value for all float vector parameters, or a vector which limit the value for the parameters individually. If the minimum initialization value is smaller than the float vector size, the limit used for the last values of the float vector is equal to the last value of the minimum initialization value vector.-->
      <Entry key="ga.init.minvalue">1</Entry>
      <!--ec.subloopterm.maxgen [UInt]: Maximum number of generation to do in the sub-loop evolution.-->
      <Entry key="ec.subloopterm.maxgen">1</Entry>
      <!--gp.cx.distrpb [Float]: Probability that a crossover point is a branch (node with sub-trees). Value of 1.0 means that all crossover points are branches, and value of 0.0 means that all crossover points are leaves.-->
      <Entry key="gp.cx.distrpb">0.9</Entry>
      <!--gp.cx.indpb [Float]: Individual crossover probability at each generation.-->
      <Entry key="gp.cx.indpb">0.9</Entry>
      <!--gp.init.maxargs [UIntArray]: Maximum number of arguments in GP tree. Tree arguments are is usually useful with ADFs (and similar stuff).-->
      <Entry key="gp.init.maxargs">0,2</Entry>
      <!--gp.init.maxdepth [UInt]: Maximum depth for newly initialized trees.-->
      <Entry key="gp.init.maxdepth">5</Entry>
      <!--gp.init.maxtree [UInt]: Maximum number of GP tree in newly initialized individuals. More than one tree is usually useful with ADFs (and other ADx).-->
      <Entry key="gp.init.maxtree">1</Entry>
      <!--gp.init.minargs [UIntArray]: Minimum number of arguments in GP tree. Tree arguments are is usually useful with ADFs a(nd similar stuff).-->
      <Entry key="gp.init.minargs">0,2</Entry>
      <!--gp.init.mindepth [UInt]: Minimum depth for newly initialized trees.-->
      <Entry key="gp.init.mindepth">2</Entry>
      <!--gp.init.mintree [UInt]: Minimum number of GP tree in newly initialized individuals. More than one tree is usually useful with ADFs (and other ADx).-->
      <Entry key="gp.init.mintree">1</Entry>
      <!--gp.mutstd.indpb [Float]: Standard mutation probability for an individual. A standard mutation replaces a sub-tree with a randomly generated one.-->
      <Entry key="gp.mutstd.indpb">0.3</Entry>
      <!--gp.mutstd.maxdepth [UInt]: Maximum depth for standard mutation. A standard mutation replaces a sub-tree with a randomly generated one.-->
      <Entry key="gp.mutstd.maxdepth">5</Entry>
      <!--gp.tree.maxdepth [UInt]: Maximum allowed depth for the trees.-->
      <Entry key="gp.tree.maxdepth">50</Entry>
      <!--gp.try [UInt]: Maximum number of attempts to modify a GP tree in a genetic operation. As there is topological constraints on GP trees (i.e. tree depth limit), it is often necessary to try a genetic operation several times.-->
      <Entry key="gp.try">2</Entry>
      <!--lg.console.level [UInt]: Log level used for console output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.console.level">3</Entry>
      <!--lg.file.level [UInt]: Log level used for file output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.file.level">7</Entry>
      <!--lg.file.name [String]: Filename in which messages are outputed. An empty string file name means no output is done to a file.-->
      <Entry key="lg.file.name">beagle.log</Entry>
      <!--lg.show.class [Bool]: Flag whether class name is outputed in the logs.-->
      <Entry key="lg.show.class">0</Entry>
      <!--lg.show.level [Bool]: Flag whether logging level in outputed in the logs.-->
      <Entry key="lg.show.level">0</Entry>
      <!--lg.show.type [Bool]: Flag whether message type is outputed in the logs.-->
      <Entry key="lg.show.type">0</Entry>
      <!--ms.restart.file [String]: Name of the milestone file from which the evolution should be restarted. An empty string means no restart.-->
      <Entry key="ms.restart.file"/>
      <!--ms.write.compress [Bool]: If true, this flag indicates that milestones will be compressed with gzip. Otherwise, each milestone are kept plain text.-->
      <Entry key="ms.write.compress">1</Entry>
      <!--ms.write.interval [UInt]: Milestone saving interval (in number of generations). When zero, only the last generation milestone is saved.-->
      <Entry key="ms.write.interval">2</Entry>
      <!--ms.write.over [Bool]: If true, this flag indicates that old milestones should be over-written. Otherwise, each milestone has a different suffix.-->
      <Entry key="ms.write.over">0</Entry>
      <!--ms.write.perdeme [Bool]: If true, this flag indicates that separate milestones should be written after each demes processing. Otherwise milestones are written after the processing of a complete populations.-->
      <Entry key="ms.write.perdeme">0</Entry>
      <!--ms.write.prefix [String]: Prefix used to name the evolution milestone files. An empty string means no milestone.-->
      <Entry key="ms.write.prefix">beagle</Entry>
      <!--ms.write.subinterval [UInt]: Sub-evolution milestone saving interval (in number of generations). When zero, no milestone is saved.-->
      <Entry key="ms.write.subinterval">2</Entry>
    </Register>
		</System>
	</Beagle>

