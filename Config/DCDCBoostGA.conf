<?xml version="1.0" encoding="ISO-8859-1"?>
<Beagle version="3.0.3">
	<!--Created by a configuration dump-->
	<!--Evolver: configuration of the algorithm-->
	<Evolver>
		<BootStrapSet>
			<IfThenElseOp parameter="ms.restart.file" value="">
				<PositiveOpSet>
					<GA-InitBitStrOp repropb="ec.repro.prob"/>
					<DCDCBoostGAEvalOp/>
					<StatsCalcFitnessSimpleOp/>
					</PositiveOpSet>
				<NegativeOpSet>
					<MilestoneReadOp/>
					</NegativeOpSet>
				</IfThenElseOp>
			<TermMaxGenOp/>
			<MilestoneWriteOp/>
			</BootStrapSet>
		<MainLoopSet>
			<GenerationalOp>
				<DCDCBoostGAEvalOp>
					<GA-CrossoverOnePointBitStrOp matingpb="ga.cx1p.prob">
						<SelectTournamentOp/>
						<SelectTournamentOp/>
						</GA-CrossoverOnePointBitStrOp>
					</DCDCBoostGAEvalOp>
				<DCDCBoostGAEvalOp>
					<GA-MutationFlipBitStrOp mutationpb="ga.mutflip.indpb" mutbitpb="ga.mutflip.bitpb">
						<SelectTournamentOp/>
						</GA-MutationFlipBitStrOp>
					</DCDCBoostGAEvalOp>
				
				<SelectTournamentOp/>
				</GenerationalOp>
			<MigrationRandomRingOp/>
			<StatsCalcFitnessSimpleOp/>
			<TermMaxGenOp/>
			<MilestoneWriteOp/>
			</MainLoopSet>
		</Evolver>
	<!--System: setting of the evolution-->
	<System>
		<Register>
			<!--ec.hof.demesize [UInt]: Number of individuals kept in each deme's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
			<Entry key="ec.hof.demesize">0</Entry>
			<!--ec.hof.vivasize [UInt]: Number of individuals kept in vivarium's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
			<Entry key="ec.hof.vivasize">1</Entry>
			<!--ec.init.seedsfile [String]: Name of file to use for seeding the evolution with crafted individual. An empty string means no seeding.-->
			<Entry key="ec.init.seedsfile"/>
			<!--ec.mig.interval [UInt]: Interval between each migration, in number of generations. An interval of 0 disables migration.-->
			<Entry key="ec.mig.interval">1</Entry>
			<!--ec.mig.size [UInt]: Number of individuals migrating between each deme, at a each migration.-->
			<Entry key="ec.mig.size">2</Entry>
			<!--ec.pop.size [UIntArray]: Number of demes and size of each deme of the population. The format of an UIntArray is S1,S2,...,Sn, where Si is the ith value. The size of the UIntArray is the number of demes present in the vivarium, while each value of the vector is the size of the corresponding deme.-->
			<Entry key="ec.pop.size">10</Entry>
			<Entry key="ec.elite.keepsize">1</Entry>
			<!--ec.rand.seed [ULong]: Randomizer seed. A zero value means that the seed will be initialized using the /dev/urandom device.-->
			<Entry key="ec.rand.seed">0</Entry>
			<!--ec.repro.prob [Float]: Probability that an individual is reproducted as is, without modification. This parameter is useful only in selection and initialization operators that are composing a breeder tree.-->
			<Entry key="ec.repro.prob">1.0</Entry>
			<!--ec.sel.tournsize [UInt]: Number of participants for tournament selection.-->
			<Entry key="ec.sel.tournsize">2</Entry>
			<!--ec.term.maxgen [UInt]: Maximum number of generations for the evolution.-->
			<Entry key="ec.term.maxgen">50</Entry>
			<!--ga.cx1p.prob [Float]: GA one-point crossover probability of a single individual.-->
			<Entry key="ga.cx1p.prob">0.3</Entry>
			<!--ga.init.bitpb [Float]: Distribution probability of bit values. A probability of 1.0 means that the bits values are all initialized to 1, while a probability of 0.0 means that they are all initialized to 0. Probability of 0.5 means that the bits are uniformly, randomly initialized with equally 0s and 1s.-->
			<Entry key="ga.init.bitpb">0.5</Entry>
			<!--ga.init.numberbits [UInt]: Number of bits used to initialize individuals.-->
			<Entry key="ga.init.numberbits">38</Entry>
			<!--ga.mutflip.bitpb [Float]: Probability for each bit to be inverted by mutation, when an individual is mutated.-->
			<Entry key="ga.mutflip.bitpb">0.01</Entry>
			<!--ga.mutflip.indpb [Float]: Bit flip mutation probability for each GA individual.-->
			<Entry key="ga.mutflip.indpb">1</Entry>
			<!--lg.console.level [UInt]: Log level used for console output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
			<Entry key="lg.console.level">4</Entry>
			<!--lg.file.level [UInt]: Log level used for file output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
			<Entry key="lg.file.level">4</Entry>
			<!--lg.file.name [String]: Filename in which messages are outputed. An empty string file name means no output is done to a file.-->
			<Entry key="lg.file.name">beagle.log</Entry>
			<!--lg.show.class [Bool]: Flag whether class name is outputed in the logs.-->
			<Entry key="lg.show.class">0</Entry>
			<!--lg.show.level [Bool]: Flag whether logging level in outputed in the logs.-->
			<Entry key="lg.show.level">0</Entry>
			<!--lg.show.type [Bool]: Flag whether message type is outputed in the logs.-->
			<Entry key="lg.show.type">0</Entry>
			<!--ms.restart.file [String]: Name of the milestone file from which the evolution should be restarted. An empty string means no restart.-->
			<Entry key="ms.restart.file"/>
			<!--ms.write.compress [Bool]: If true, this flag indicates that milestones will be compressed with gzip. Otherwise, each milestone are kept plain text.-->
			<Entry key="ms.write.compress">1</Entry>
			<!--ms.write.interval [UInt]: Milestone saving interval (in number of generations). When zero, only the last generation milestone is saved.-->
			<Entry key="ms.write.interval">5</Entry>
			<!--ms.write.over [Bool]: If true, this flag indicates that old milestones should be over-written. Otherwise, each milestone has a different suffix.-->
			<Entry key="ms.write.over">0</Entry>
			<!--ms.write.perdeme [Bool]: If true, this flag indicates that separate milestones should be written after each demes processing. Otherwise milestones are written after the processing of a complete populations.-->
			<Entry key="ms.write.perdeme">0</Entry>
			<!--ms.write.prefix [String]: Prefix used to name the evolution milestone files. An empty string means no milestone.-->
			<Entry key="ms.write.prefix">beagle</Entry>
			
			<!--sim.control.generationstep [FloatArray]: Generation for control target transition-->
			<Entry key="sim.control.generationstep">-1</Entry>
			<!--sim.control.target [String]: Tank levels target for the controller-->
			<Entry key="sim.control.target">0(3.0,2.5)</Entry>
			<!--sim.control.timestep [Float]: Controller time step-->
			<Entry key="sim.control.timestep">0.01</Entry>
			<!--sim.control.tol [Float]: Tank levels tolerance for the controller-->
			<Entry key="sim.control.tol">0.005</Entry>
			<!--sim.duration.time [Float]: Simulation duration-->
			<Entry key="sim.duration.time">5e-4</Entry>
			<!--sim.dynamic.levelini [Float]: Initial tank levels-->
			<Entry key="sim.dynamic.initialstate">0,0</Entry>
			<!--sim.dynamic.timestep [Float]: Dynamic time step-->
			<Entry key="sim.dynamic.timestep">1e-8</Entry>   
			</Register>
		</System>
	</Beagle>
